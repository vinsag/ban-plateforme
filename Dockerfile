# using an optimized node image
FROM node:20-alpine

ENV MONGODB_URL=mongodb://db-mongo
ENV MONGODB_DBNAME=${MONGODB_DBNAME}
ENV POSTGRES_URL=db-postgres
ENV POSTGRES_BAN_USER=${POSTGRES_BAN_USER}
ENV POSTGRES_BAN_PASSWORD=${POSTGRES_BAN_PASSWORD}
ENV POSTGRES_DB=${POSTGRES_DB}
ENV REDIS_URL=redis://redis
ENV FANTOIR_PATH=${FANTOIR_PATH}
ENV GAZETTEER_DB_PATH=${GAZETTEER_DB_PATH}
ENV CONTOURS_DATA_PATH=${CONTOURS_DATA_PATH}
ENV COMMUNES_LOCAUX_ADRESSES_DATA_PATH=${COMMUNES_LOCAUX_ADRESSES_DATA_PATH}
ENV DEPARTEMENTS=${DEPARTEMENTS}
ENV MAX_CONCURRENT_WORKERS=${MAX_CONCURRENT_WORKERS}
ENV DATAGOUV_API_KEY=${DATAGOUV_API_KEY}
ENV API_DEPOT_URL=${API_DEPOT_URL}
ENV ADMIN_TOKEN=${ADMIN_TOKEN}
ENV BAN_API_AUTHORIZED_TOKENS=${BAN_API_AUTHORIZED_TOKENS}
ENV BAN_API_URL=${BAN_API_URL}
ENV API_IDFIX_URL=${API_IDFIX_URL}
ENV API_IDFIX_TOKEN=${API_IDFIX_TOKEN}
ENV JOB_STATUS_LIMIT_DURATION=${JOB_STATUS_LIMIT_DURATION}
ENV MATOMO_URL=${MATOMO_URL}
ENV MATOMO_SITE_ID=${MATOMO_SITE_ID}
ENV MATOMO_TOKEN_AUTH=${MATOMO_TOKEN_AUTH}
ENV FORCE_DOWNLOAD_CONTOUR=
ENV FORCE_DOWNLOAD_DATASETS=

ARG https_proxy=""
ENV https_proxy=${https_proxy}
ENV HTTPS_PROXY=${https_proxy}

ARG no_proxy=""
ENV no_proxy=${no_proxy}
ENV NO_PROXY=${no_proxy}
# optimzing caching for yarn install

WORKDIR /app

COPY package.json yarn.lock .
RUN yarn install

# creating /data and /dist folder to be able to map volumes
RUN mkdir data && mkdir dist

COPY . .

CMD ["node", "process.yml"]